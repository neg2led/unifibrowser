name: build-and-publish
on:
  workflow_dispatch:
  release:
    types: [published, created, edited]
  push:
    branches:
      - 'main'
      - 'release/**'

concurrency:
  group: ${{ github.head_ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME: 'unifibrowser'
  IMAGE_TAG: 'latest'

jobs:
  buildx:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
      -
        name: Set up docker layer cache
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      -
        name: Print available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      -
        name: Build Images
        run: |
          docker buildx build \
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --cache-to "type=local,dest=/tmp/.buildx-cache" \
            --platform ${{ steps.buildx.outputs.platforms }} \
            --output "type=image,push=false" \
            --tag ${{ format('{0}/{1}:{2}', github.repository_owner, env.IMAGE_NAME, env.IMAGE_TAG ) }} \
            --file Dockerfile .
      -
        name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Publish Images
        if: ${{ (github.event_name == "release") && success() }}
        run: |
          docker buildx build \
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --platform ${{ steps.buildx.outputs.platforms }} \
            --output "type=image,push=true" \
            --tag ${{ format('{0}/{1}:{2}', github.repository_owner, env.IMAGE_NAME, env.IMAGE_TAG ) }} \
            --file Dockerfile .
      -
        name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ format('{0}/{1}:{2}', github.repository_owner, env.IMAGE_NAME, env.IMAGE_TAG ) }}
